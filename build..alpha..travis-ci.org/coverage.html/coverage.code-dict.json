{"/home/travis/build/npmtest/node-npmtest-tldr/test.js":"/* istanbul instrument in package npmtest_tldr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tldr/lib.npmtest_tldr.js":"/* istanbul instrument in package npmtest_tldr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tldr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tldr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tldr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tldr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tldr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tldr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tldr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tldr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tldr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tldr.__dirname + '/lib.npmtest_tldr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/bin/tldr":"#!/usr/bin/env node\n\nconst program = require('commander');\nconst pkg = require('../package');\nconst tldr = require('../lib/tldr');\nconst config = require('../lib/config');\nconst platform = require('../lib/platform');\n\nprogram\n  .version(pkg.version)\n  .description(pkg.description)\n  .usage('command [options]')\n  //\n  // BASIC OPTIONS\n  //\n  .option('-l, --list', 'List all commands for the chosen platform in the cache')\n  .option('-a, --list-all', 'List all commands in the cache')\n  .option('-1, --single-column', 'List single command per line (use with options -l or -a)')\n  .option('-r, --random', 'Show a random command')\n  .option('-e, --random-example', 'Show a random example')\n  .option('-f, --render [file]', 'Render a specific markdown [file]')\n  .option('-m, --markdown', 'Output in markdown format')\n  .option('-o, --os [type]', 'Override the operating system [linux, osx, sunos]')\n  .option('--linux', 'Override the operating system with Linux')\n  .option('--osx', 'Override the operating system with OSX')\n  .option('--sunos', 'Override the operating system with SunOS')\n  .option('-t, --theme [theme]', 'Color theme (simple, base16, ocean)')\n  //\n  // CACHE MANAGEMENT\n  //\n  .option('-u, --update', 'Update the local cache')\n  .option('-c, --clear-cache', 'Clear the local cache');\n\nprogram.on('--help', () => {\n  console.log('Examples');\n  console.log('');\n  console.log('    $ tldr tar');\n  console.log('    $ tldr du --os=linux');\n  console.log('    $ tldr --list');\n  console.log('    $ tldr --list-all');\n  console.log('    $ tldr --random');\n  console.log('    $ tldr --random-example');\n  console.log('');\n  console.log('To control the cache');\n  console.log('');\n  console.log('    $ tldr --update');\n  console.log('    $ tldr --clear-cache');\n  console.log('');\n  console.log('To render a local file (for testing)');\n  console.log('');\n  console.log('    $ tldr --render /path/to/file.md');\n  console.log('');\n});\n\nprogram.parse(process.argv);\n\nif (program.linux) {\n  program.os = 'linux';\n}\n\nif (program.osx) {\n  program.os = 'osx';\n}\n\nif (program.sunos) {\n  program.os = 'sunos';\n}\n\n\nif (program.os) {\n  if (platform.isSupported(program.os)) {\n    config.get().platform = program.os;\n  }\n}\n\nif (program.theme) {\n  // TODO: Validate theme\n  config.get().theme = program.theme;\n}\n\nif (program.list) {\n  tldr.list(program.singleColumn);\n} else if (program.listAll) {\n  tldr.listAll(program.singleColumn);\n} else if (program.random) {\n  tldr.random();\n} else if (program.randomExample) {\n  tldr.randomExample();\n} else if (program.clearCache) {\n  tldr.clearCache();\n} else if (program.update) {\n  tldr.updateCache();\n} else if (program.render) {\n  tldr.render(program.render);\n} else if (program.args.length >= 1) {\n  tldr.get(program.args, program);\n} else {\n  program.outputHelp();\n  process.exit(1);\n}\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/tldr.js":"'use strict';\n\nconst sample = require('lodash.sample');\nconst fs = require('fs');\nconst ms = require('ms');\nconst cache = require('./cache');\nconst platform = require('./platform');\nconst messages = require('./messages');\nconst parser = require('./parser');\nconst render = require('./render');\nconst index = require('./index');\nconst exit = process.exit;\n\nexports.list = (singleColumn) => {\n  let os = platform.getPreferredPlatformFolder();\n  index.commandsFor(os, (commands) => {\n    printPages(commands, singleColumn);\n  });\n};\n\nexports.listAll = (singleColumn) => {\n  index.commands((commands) => {\n    printPages(commands, singleColumn);\n  });\n};\n\nexports.get = (commands, options) => {\n  printBestPage(commands.join('-'), options);\n};\n\nexports.random = () => {\n  let os = platform.getPreferredPlatformFolder();\n  index.commandsFor(os, (pages) => {\n    if (pages.length === 0) {\n      console.error(messages.emptyCache());\n      exit(1);\n    }\n    let page = sample(pages);\n    console.log('PAGE', page);\n    printBestPage(page);\n  });\n};\n\nexports.randomExample = () => {\n  let os = platform.getPreferredPlatformFolder();\n  index.commandsFor(os, (pages) => {\n    if (pages.length === 0) {\n      console.error(messages.emptyCache());\n      exit(1);\n    }\n    let page = sample(pages);\n    console.log('PAGE', page);\n    printBestPage(page, {randomExample: true});\n  });\n};\n\nexports.render = (file) => {\n  // Reading the file\n  fs.readFile(file, 'utf8', (err, content) => {\n    if (err) {\n      console.error(err.stack);\n      exit(1);\n    }\n    // Getting the shortindex first to populate the shortindex var\n    index.getShortIndex(() => {\n      renderContent(content);\n    });\n  });\n};\n\nexports.clearCache = () => {\n  cache.clear(() => {\n    console.log('Done');\n  });\n};\n\nexports.updateCache = () => {\n  console.log('Updating...');\n  cache.update((err) => {\n    if (err) {\n      console.error(err.stack);\n      exit(1);\n    }\n    console.log('Done');\n  });\n};\n\nfunction printPages(pages, singleColumn) {\n  if (pages.length === 0) {\n    console.error(messages.emptyCache());\n    exit(1);\n  }\n  checkStale();\n  let endOfLine = require('os').EOL;\n  let delimiter = singleColumn ? endOfLine : ', ';\n  console.log('\\n' + pages.join(delimiter));\n}\n\nfunction printBestPage(command, options) {\n  // TODO: replace with default parameter if Node v4 support dropped.\n  options = options || {};\n  /* eslint-disable */ // To allow not checking for err\n  // Trying to get the page from cache first\n  cache.getPage(command, (err, content) => {\n  /* eslint-enable */\n    if (!content) {\n      // If not found, try to update\n      console.log('Page not found. Updating cache ..');\n      cache.update((err) => {\n        if (err) {\n          console.error(err.stack);\n          exit(1);\n        }\n        // And then, try to check in cache again\n        cache.getPage(command, (err, content2) => {\n          if (err) {\n            console.error(err.stack);\n            exit(1);\n          }\n          if (!content2) {\n            console.error(messages.notFound());\n            exit(1);\n          } else {\n            checkStale();\n            renderContent(content2, options);\n          }\n        });\n      });\n    } else { // If found in first try, render it\n      checkStale();\n      renderContent(content, options);\n    }\n  });\n}\n\nfunction renderContent(content, options) {\n  if (options.markdown) {\n    return console.log(content);\n  }\n  let page = parser.parse(content);\n  if (options && options.randomExample === true) {\n    page.examples = [sample(page.examples)];\n  }\n  let output = render.toANSI(page);\n  console.log(output);\n}\n\nfunction checkStale() {\n  cache.lastUpdated((err, stats) => {\n    if (err) {\n      console.error(err.stack);\n      exit(1);\n    }\n    if (stats.mtime < Date.now() - ms('30d')) {\n      console.warn('Cache is out of date, you should run \"tldr --update\"');\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/cache.js":"'use strict';\n\nconst fs = require('fs-extra');\nconst path = require('path');\nconst config = require('./config');\nconst remote = require('./remote');\nconst platform = require('./platform');\nconst index = require('./index');\n\nconst CACHE_FOLDER = path.join(config.get().cache, 'cache');\n\nexports.lastUpdated = (done) => {\n  fs.stat(CACHE_FOLDER, done);\n};\n\nexports.getPage = (page, done) => {\n  let preferredPlatform = platform.getPreferredPlatformFolder();\n  index.findPlatform(page, preferredPlatform, (folder) => {\n    if (folder) {\n      let filePath = path.join(CACHE_FOLDER, 'pages', folder, page + '.md');\n      fs.readFile(filePath, 'utf8', done);\n    } else {\n      done(null, null);\n    }\n  });\n};\n\nexports.clear = (done) => {\n  fs.remove(CACHE_FOLDER, done);\n};\n\nexports.update = (done) => {\n  // Downloading fresh copy\n  remote.download((err, tempFolder) => {\n    if (err) {\n      return done(err);\n    }\n    // Creating cache folder\n    fs.mkdirs(CACHE_FOLDER, (err) => {\n      if (err) {\n        return done(err);\n      }\n      // Copying from tmp to cache folder\n      fs.copy(tempFolder, CACHE_FOLDER, {clobber: true}, (err) => {\n        if (err) {\n          return done(err);\n        }\n        index.rebuildPagesIndex(() => {\n          return done();\n        });\n      });\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/config.js":"'use strict';\n\nconst defaults = require('lodash.defaults');\nconst fs = require('fs');\nconst path = require('path');\nconst osHomedir = require('os-homedir');\n\nlet config = null;\n\nexports.reset = () => {\n  config = null;\n};\n\nexports.get = () => {\n  if (!config) {\n    config = load();\n  }\n  return config;\n};\n\nfunction load() {\n  const DEFAULT = path.join(__dirname, '..', 'config.json');\n  const CUSTOM = path.join(osHomedir(), '.tldrrc');\n\n  let defaultConfig = JSON.parse(fs.readFileSync(DEFAULT));\n  defaultConfig.cache = path.join(osHomedir(), '.tldr');\n  /*eslint-disable no-process-env */\n  defaultConfig.proxy = process.env.HTTP_PROXY || process.env.http_proxy;\n  /*eslint-enable no-process-env */\n\n  let customConfig = {};\n  try {\n    customConfig = JSON.parse(fs.readFileSync(CUSTOM));\n  } catch (ex) {\n    /*eslint-disable */\n    /*eslint-enable */\n  }\n\n  let merged = defaults(customConfig, defaultConfig);\n  // Validating the theme settings\n  let errors = Object.keys(!merged.themes ? {} : merged.themes).map(\n    (key) => {\n      return validateThemeItem(merged.themes[key], key);\n    }\n  );\n  errors.push(validatePlatform(merged.platform));\n  // Filtering out all the null entries\n  errors = errors.filter((item) => { return item !== null; });\n\n  if (errors.length > 0) {\n    throw new Error('Error in .tldrrc configuration:\\n' + errors.join('\\n'));\n  }\n  return merged;\n}\n\nfunction validatePlatform(os) {\n  let platform = require('./platform');\n  if (os && !platform.isSupported(os)) {\n    return 'Unsupported platform : ' + os;\n  }\n  return null;\n}\n\nfunction validateThemeItem(field, key) {\n  let validValues = ['',\n    'reset',\n    'bold',\n    'dim',\n    'italic',\n    'underline',\n    'inverse',\n    'hidden',\n    'black',\n    'red',\n    'green',\n    'yellow',\n    'blue',\n    'magenta',\n    'cyan',\n    'white',\n    'gray',\n    'bgBlack',\n    'bgRed',\n    'bgGreen',\n    'bgYellow',\n    'bgBlue',\n    'bgMagenta',\n    'bgCyan',\n    'bgWhite'\n  ];\n  // TODO: change this to return all errors in a field\n  for (let item in field) {\n    if (field.hasOwnProperty(item)) {\n      let tokens = field[item].replace(/\\s+/g, '').split(',');\n      for (let i = 0; i < tokens.length; i++) {\n        if (validValues.indexOf(tokens[i]) < 0) {\n          return 'Invalid theme value : ' + tokens[i] + ' in ' + key + ' theme';\n        }\n      }\n    }\n  }\n  return null;\n}\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/remote.js":"'use strict';\n\nconst path = require('path');\nconst os = require('os');\nconst fs = require('fs-extra');\nconst config  = require('./config');\n\nfunction source() {\n  let repository = config.get().repository;\n  if (repository) {\n    let parts  = repository.split('#');\n    let github = parts[0].match(/^(.*)\\/(.*)$/);\n    return {\n      user: github[1],\n      repo: github[2],\n      branch: parts[1] || 'master'\n    };\n  }\n  return null;\n}\n\n// Downloads the zip file from github and extracts it to /tmp/tldr\nexports.download = (done) => {\n  let request = require('request');\n  let unzip   = require('unzip2');\n  let src = source();\n  let url = config.get().url;\n  let target = path.join(os.tmpdir(), 'tldr');\n  let inside = target;\n  if (src) {\n    url = 'https://github.com/' + src.user + '/' + src.repo + '/archive/' + src.branch + '.zip';\n    inside = path.join(target, src.repo + '-' + src.branch);\n  }\n\n  // Empty the tmp dir\n  fs.emptyDir(target, (err) => {\n    if (err) {\n      return done(err, inside);\n    }\n\n    // Creating the extractor\n    let extractor = unzip.Extract({path: target});\n    extractor.on('error', () => {\n      done(new Error('Cannot update from ' + url), inside);\n    });\n    extractor.on('close', () => {\n      done(null, inside);\n    });\n\n    // Setting the proxy if set by config\n    if (config.get().proxy) {\n      request = request.defaults({\n        'proxy':config.proxy\n      });\n    }\n\n    // Creating the request and passing the extractor\n    let req = request.get({\n      url: url,\n      headers: {'User-Agent' : 'tldr-node-client'}\n    });\n\n    req.on('error', done);\n    req.pipe(extractor);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/platform.js":"'use strict';\n\nconst os = require('os');\nconst config = require('./config');\n\nconst folders = {\n  'osx': 'osx',\n  'darwin': 'osx',\n  'linux': 'linux',\n  'sunos': 'sunos',\n  'win32': 'win32'\n};\n\n// Check if the platform is there in the list of platforms or not\nfunction isSupported(platform) {\n  return folders.hasOwnProperty(platform);\n}\n\n// If the platform given in config is present, return that.\n// Else, return the system platform\nfunction getPreferredPlatform() {\n  let platform = config.get().platform;\n  if (isSupported(platform)) {\n    return platform;\n  }\n  return os.platform();\n}\n\nfunction specific(command, platform) {\n  return platform + '/' + command + '.md';\n}\n\nfunction resolve(command) {\n  return [\n    specific(command, getPreferredPlatformFolder()),\n    specific(command, 'common')\n  ];\n}\n\n// Get the folder name for a platform\nfunction getPreferredPlatformFolder() {\n  let platform = getPreferredPlatform();\n  return folders[platform];\n}\n\nmodule.exports = {\n  isSupported,\n  getPreferredPlatform,\n  getPreferredPlatformFolder,\n  resolve\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/index.js":"'use strict';\n\nconst fs = require('fs-extra');\nconst path = require('path');\nconst config = require('./config');\nconst utils = require('./utils');\n\nlet shortIndex = null;\n\nconst pagesPath = path.join(config.get().cache, 'cache/pages');\nconst shortIndexFile = path.join(pagesPath, 'shortIndex.json');\n\nfunction findPlatform(page, preferredPlatform, done) {\n  // Load the index\n  getShortIndex((idx) => {\n    // First checking whether page is there or not\n    if (! (page in idx)) {\n      return done(null);\n    }\n    // Getting the platforms\n    let platforms = idx[page];\n    if (platforms.indexOf(preferredPlatform) >= 0) {\n      return done(preferredPlatform);\n    } else if (platforms.indexOf('common') >= 0) {\n      return done('common');\n    }\n    return done(null);\n  });\n}\n\n// hasPage is always called after index is created, hence just return the variable\n// in memory. There is no need to re-read the index file again.\nfunction hasPage(page) {\n  if (!shortIndex) {\n    return false;\n  }\n  return page in shortIndex;\n}\n\n// This returns all commands available in the local cache\nfunction commands(done) {\n  getShortIndex((idx) => {\n    return done(Object.keys(idx).sort());\n  });\n}\n\n// This returns all commands for a given platform.\n// P.S. - The platform 'common' is always included.\nfunction commandsFor(platform, done) {\n  getShortIndex((idx) => {\n    let commands = Object.keys(idx)\n                    .filter((cmd) => {\n                      /* eslint-disable */ // To allow using -1 to check if it contains in the array\n                      return idx[cmd].indexOf(platform) !== -1\n                        || idx[cmd].indexOf('common') !== -1 ;\n                      /* eslint-enable */\n                    })\n                    .sort();\n    done(commands);\n  });\n}\n\n// Delete the index file\nfunction clearPagesIndex(done) {\n  fs.unlink(shortIndexFile, () => {\n    clearRuntimeIndex();\n    done();\n  });\n}\n\n// Set the variable to null\nfunction clearRuntimeIndex() {\n  shortIndex = null;\n}\n\nfunction rebuildPagesIndex(done) {\n  clearPagesIndex(() => {\n    getShortIndex(()=>{\n      return done();\n    });\n  });\n}\n\n// If the variable is not set, read the file and set it.\n// Else, just return the variable\nfunction getShortIndex(done) {\n  if (!shortIndex) {\n    return readShortPagesIndex(done);\n  }\n  return done(shortIndex);\n}\n\n// Reads the index file, and loads it into memory.\n// If the file is not created, create the data structure, write the file, and load\n// it into memory\nfunction readShortPagesIndex(done) {\n  fs.readFile(shortIndexFile, 'utf8', (err, idx) => {\n    // file is not present, need to create the index\n    if (err) {\n      idx = buildShortPagesIndex();\n      if (Object.keys(idx).length > 0) {\n        fs.writeFile(shortIndexFile, JSON.stringify(idx), (err) => {\n          if (err) {\n            console.error(err);\n          }\n          shortIndex = idx;\n          return done(idx);\n        });\n      }\n    } else { // Just parse and set shortIndex variable, then return the value\n      idx = JSON.parse(idx);\n      shortIndex = idx;\n      return done(idx);\n    }\n  });\n}\n\nfunction buildShortPagesIndex() {\n  try {\n    let files = utils.walkSync(pagesPath);\n    files = files.filter(utils.isPage);\n    let reducer = (index, file) => {\n      let os = utils.parsePlatform(file);\n      let page = utils.parsePagename(file);\n      if (index[page]) {\n        index[page].push(os);\n      } else {\n        index[page] = [os];\n      }\n      return index;\n    };\n    return files.reduce(reducer, {});\n  } catch (e) {\n    return {};\n  }\n}\n\nmodule.exports = {\n  getShortIndex,\n  hasPage,\n  findPlatform,\n  commands,\n  commandsFor,\n  clearPagesIndex,\n  clearRuntimeIndex,\n  rebuildPagesIndex\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/utils.js":"var fs = require('fs-extra');\nvar path = require('path');\n\nmodule.exports = {\n  parsePlatform(pagefile) {\n    return path.dirname(pagefile);\n  },\n\n  parsePagename(pagefile) {\n    return path.basename(pagefile, '.md');\n  },\n\n  isPage(file) {\n    return path.extname(file) === '.md';\n  },\n\n  // TODO: remove this\n  commandSupportedOn(platform) {\n    return (command) => {\n      return command.platform.indexOf(platform) >= 0\n        || command.platform.indexOf('common') >= 0;\n    };\n  },\n\n  walkSync(dir, filelist) {\n    var files = fs.readdirSync(dir);\n    filelist = filelist || [];\n    files.forEach((file) => {\n      if (fs.statSync(path.join(dir, file)).isDirectory()) {\n        filelist = this.walkSync(path.join(dir, file), filelist);\n      }\n      else {\n        filelist.push(path.join(path.basename(dir), file));\n      }\n    });\n    return filelist;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/messages.js":"const config = require('./config');\n\nmodule.exports = {\n  emptyCache() {\n    return `Local cache is empty\nPlease run tldr --update`;\n  },\n\n  notFound() {\n    return `Page not found\nTry updating with \"tldr --update\", or submit a pull request to:\nhttps://github.com/` + config.get().pagesRepository;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/parser.js":"'use strict';\n\nconst unescape = require('lodash.unescape');\nconst marked = require('marked');\nconst chalk = require('chalk');\nconst index = require('./index');\n\nconst allElements = [\n  'blockquote', 'html', 'strong', 'em', 'br', 'del',\n  'heading', 'hr', 'image', 'link', 'list', 'listitem',\n  'paragraph', 'strikethrough', 'table', 'tablecell', 'tablerow'\n];\n\nfunction unhtml(text){\n  return unescape(text);\n}\n\nexports.parse = (markdown) => {\n  // Creating the page structure\n  let page = {\n    name: '',\n    description: '',\n    examples: [],\n    seeAlso: []\n  };\n  // Initializing the markdown renderer\n  let r = new marked.Renderer();\n\n  // ignore all syntax by default\n  allElements.forEach((e) => {\n    r[e] = () => { return ''; };\n  });\n\n  // Overriding the different elements to incorporate the custom tldr format\n\n  r.codespan = (text) => {\n    if (index.hasPage(text) && text !== page.name) {\n      if (page.seeAlso.indexOf(text) < 0) {\n        page.seeAlso.push(text);\n      }\n    }\n    let example = page.examples[page.examples.length-1];\n    // If example exists and a code is already not added\n    if (example && !example.code) {\n      example.code = unhtml(text);\n    }\n    return text;\n  };\n\n\n  // paragraphs just pass through (automatically created by new lines)\n  r.paragraph = (text) => {\n    return text;\n  };\n\n  r.heading = (text, level) => {\n    if (level === 1) {\n      page.name = text.trim();\n    }\n    return text;\n  };\n\n  r.blockquote = (text) => {\n    page.description += unhtml(text);\n    return text;\n  };\n\n  r.strong = (text) => {\n    return chalk.bold(text);\n  };\n\n  r.em = (text) => {\n    return chalk.italic(text);\n  };\n\n  r.listitem = (text) => {\n    page.examples.push({\n      description: unhtml(text)\n    });\n    return text;\n  };\n\n  marked(markdown, {\n    renderer: r,\n    sanitize: true\n  });\n\n  page.examples = page.examples.filter((example) => {\n    return example.description && example.code;\n  });\n\n  return page;\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/render.js":"'use strict';\n\nconst Theme = require('./theme');\nconst config = require('./config');\n\n// The page structure is passed to this function, and then the theme is applied\n// to different parts of the page and rendered to the console\nexports.toANSI = (page) => {\n  // Creating the theme object\n  let themeOptions = config.get().themes[config.get().theme];\n  let theme = new Theme(themeOptions);\n\n  function highlight(code) {\n    let parts = code.split(/\\{\\{(.*?)\\}\\}/);\n    // every second part is a token\n    return '    ' + parts.reduce(function(memo, item, i) {\n      if (i % 2) {\n        return memo + theme.renderExampleToken(item);\n      }\n      return memo + theme.renderExampleCode(item);\n    }, '');\n  }\n\n  // Creating an array where each line is an element in it\n  let output = [];\n\n  // Pushing each line by extracting the page parts and applying the theme to it\n  output.push('  ' + theme.renderCommandName(page.name));\n  output.push('');\n  output.push('  ' + theme.renderMainDescription(page.description.replace(/\\n/g, '\\n  ')));\n  output.push('');\n\n  page.examples.forEach((example) => {\n    output.push(theme.renderExampleDescription('  - ' + example.description));\n    output.push(highlight(example.code));\n    output.push('');\n  });\n\n  if (page.seeAlso && page.seeAlso.length > 0) {\n    output.push('');\n    output.push('See also: ' + page.seeAlso.join(', '));\n    output.push('');\n  }\n\n  return '\\n' + output.join('\\n') + '\\n';\n};\n","/home/travis/build/npmtest/node-npmtest-tldr/node_modules/tldr/lib/theme.js":"'use strict';\n\nconst get = require('lodash.get');\nconst isEmpty = require('lodash.isempty');\nconst identity = require('lodash.identity');\nconst chalk = require('chalk');\n\n// Translates strings like 'red, underline, bold'\n// into function chalk.red.underline.bold(text)\nfunction buildStylingFunction(styles) {\n  if (isEmpty(styles)) {\n    return identity;\n  }\n  let stylingFunction = chalk;\n  let stylesPath = styles.replace(/,\\s*/g, '.');\n  return get(stylingFunction, stylesPath);\n}\n\nclass Theme {\n  constructor(options) {\n    this.theme = options;\n  }\n\n  getStylingFunction(partName) {\n    let styles = this.theme[partName];\n    return buildStylingFunction(styles);\n  }\n\n  renderCommandName(text) {\n    return this.getStylingFunction('commandName')(text);\n  }\n\n  renderMainDescription(text) {\n    return this.getStylingFunction('mainDescription')(text);\n  }\n\n  renderExampleDescription(text) {\n    return this.getStylingFunction('exampleDescription')(text);\n  }\n\n  renderExampleCode(text) {\n    return this.getStylingFunction('exampleCode')(text);\n  }\n\n  renderExampleToken(text) {\n    return this.getStylingFunction('exampleToken')(text);\n  }\n}\n\nmodule.exports = Theme;\n"}